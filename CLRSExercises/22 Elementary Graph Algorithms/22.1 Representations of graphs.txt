22.1-1

Given an adjacency-list representation of a directed graph, how long does it take
to compute the out-degree of every vertex? How long does it take to compute the
in-degrees?

Solution:

The vertex u's list of adjacent vertices Adj[u] has length Adj[u].count = O(V).
To compute the out-degree we need to find it in Adj in O(1) and then iterate to
obtain its length resulting in T = O(V).

To compute the in-degree u, we visit each edge and see whether it has u in the right.
This takes O(E + V) time.


22.1-2

Give an adjacency-list representation for a complete binary tree on 7 vertices. Give
an equivalent adjacency-matrix representation. Assume that vertices are numbered
from 1 to 7 as in a binary heap.

Solution:
        1
    2        3
 4     5  6     7

Recalling that a tree is an undirected acyclic connected graphs, we have:

Adjacency-list representation:
1: 2, 3
2: 1, 4, 5
3: 1, 6, 7
4: 2
5: 2
6: 3
7: 3

Adjacency matrix (notice the symmetry around main diagonal):
   1 2 3 4 5 6 7
   -------------
1| 0 1 1 0 0 0 0
2| 1 0 0 1 1 0 0
3| 1 0 0 0 0 1 1
4| 0 1 0 0 0 0 0
5| 0 1 0 0 0 0 0
6| 0 0 1 0 0 0 0
7| 0 0 1 0 0 0 0


22.1-3

The transpose of a directed graph G = (V, E) is the graph G^T = (V, E^T), where
E^T = {(v, u) = VxV : (u, v) = E}. Thus, G^T is G with all its edges reversed.
Describe efficient algorithms for computing G^T from G, for both the adjacency-list
and adjacency-matrix representations of G. Analyze the running times of your
algorithms.

Solution:

For the adjacency-list representation of G we can obtain G^T in Ø(E+V) time and Ø(E+V) space.
For each vertex u we traverse the list Adj[u], adding u into G^T.Adj[v].

For G represented as the adjacency matrix, we need to transpose the latter.

The brute-force way is to swap each row/column pair as we go along the main diagonal, resulting in time T = |V| + (|V|-1) + (|V|-2) + ... + 1 = Ø(V^2).
Space is O(1).

Or we can "transpose" in O(1)/O(1), storing a flag indicating whether the adjacency matrix is row-major or column-major.


22.1-4

Given an adjacency-list representation of a multigraph G = (V, E), describe an
O(V + E)-time algorithm to compute the adjacency-list representation of the
“equivalent” undirected graph G' = (V, E'), where E' consists of the edges in E
with all multiple edges between two vertices replaced by a single edge and with all
self-loops removed.

Solution:

A multigraph is like an undirected graph, but it can have both multiple edges between vertices and self-loops.

For each vertex u, iterate Adj[u] list removing duplicates and elements with key = u.
To keep O(E + V) we need to do this in O(n), how? If duplicates are adjacent that's linear, if not, we could use an extra storage (hash table) adding space O(V).
