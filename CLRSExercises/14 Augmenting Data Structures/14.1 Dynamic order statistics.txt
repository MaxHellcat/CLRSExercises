14.1-1
Show how OS-SELECT(T.root, 10) operates on the red-black tree T of Figure
14.1.

Solution:
Node with key 20, size 1. Manually ran OS-SELECT on Figure 14.1.

14.1-2
Show how OS-RANK(T, x) operates on the red-black tree T of Figure 14.1 and
the node x with x.key = 35.

Solution:
Rank is 16th, manually ran OS-RANK on Figure 14.1.

14.1-3
Write a nonrecursive version of OS-SELECT.

Solution:
1 OS-SELECT-ITERATIVE(x, i)
2 while true
3   r = x.left.size + 1
4   if i == r
5       return x
6   else if i < r
7       x = x.left
8   else
9       x = x.right
10      i = i - r

14.1-4
Write a recursive procedure OS-KEY-RANK(T, k) that takes as input an order-statistic
tree T and a key k and returns the rank of k in the dynamic set represented
by T. Assume that the keys of T are distinct.

Solution:
The idea is to both search for key and accumulate node's left-child-size+1
as we go right. This is in fact a reversed version of OS-RANK.
I added x parameter to maintain current node through recursive calls.
OS-KEY-RANK(T, key, x)
if x == nil
    return NOT_FOUND
if key == x.val
    return x.left.size + 1
else if key < x.val
    return OS-KEY-RANK(T, key, x.left)
else
    return OS-KEY-RANK(T, key, x.right) + (x.left.size + 1)

Initial call is OS-KEY-RANK(T, key, T.root) (yes T not needed, but let's go further already).
Checked this manually on Figure 14.1 on a couple of nodes.

14.1-5
Given an element x in an n-node order-statistic tree and a natural number i, how
can we determine the ith successor of x in the linear order of the tree in O(lgn)
time?

Solution:
GET-ITH-SUCCESSOR(T, x, i)
    rank = OS-RANK(T, x)
    return OS-SELECT(T.root, i+rank)
Checked manually for GET-ITH-SUCCESSOR(T, Node(key: 16), 3) = OS-SELECT(T.root, 7+3) = Node(20).
