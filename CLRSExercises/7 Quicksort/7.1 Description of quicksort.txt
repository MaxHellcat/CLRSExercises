7.1-1

Using Figure 7.1 as a model, illustrate the operation of PARTITION on the array
A = {13, 19, 9, 5, 12, 8, 7, 4, 21, 2, 6, 11}

Solution:

Drawn on paper.


7.1-2

What value of q does PARTITION return when all elements in the array A[p..r]
have the same value? Modify PARTITION so that q = floor((p+r)/2) when all
elements in the array A[p..r] have the same value.

Solution:

a) It returns q = i + 1 = r, as i gets incremented on each iteration and upon termination j = r, i = r - 1

b) Modification for the case when all r - p + 1 elements are equal are marked with // ADDED

Partition(A, p, r)
{
	let x = A[ r ]
	i = p - 1
	let allEqual = true // ADDED
	for j = p to r - 1
	{
		if A[ j ] <= x
		{
			i = i + 1
			swap( A[ i ], A[ j ] )
		}
		if A[ j ] != x { // ADDED
			allEqual = false 
		}
	}
	if allEqual { // ADDED
		return (p + r) / 2
	}
	swap( A[ i + 1 ], A[ r ] )
	return i + 1
}


7.1-3

Give a brief argument that the running time of PARTITION on a subarray of size n is Ø(n).

Solution:

Operations before and after the loop are trivial and thus take Ø(1)
Loop iterates n - 1 times and each iteration takes constant time, thus total running time is Ø(n)


7.1-4

How would you modify QUICKSORT to sort into nonincreasing order?

Solution:

I believe changing inequality sign from ≤ to ≥ in line 4 of Partition procedure would do the trick.

TODO: Check this in code
Checked - Correct!

