2.2-1

Express the function n^3/1000 - 100n^2 - 100n + 3 in terms Ø-notation.

Solution:

Let f(n) = n^3/1000 - 100n^2 - 100n + 3, then f(n) = Ø(n^3), as we're interested in the highest-order terms only.


2.2-2

Consider sorting n numbers stored in array A by first finding the smallest element
of A and exchanging it with the element in A[1]. Then find the second smallest
element of A, and exchange it with A[2]. Continue in this manner for the first n-1
elements of A. Write pseudocode for this algorithm, which is known as selection
sort. What loop invariant does this algorithm maintain? Why does it need to run
for only the first n - 1 elements, rather than for all n elements? Give the best-case
and worst-case running times of selection sort in Ø-notation.

Solution:

See 2.2-2.h


2.2-3

Consider linear search again (see Exercise 2.1-3). How many elements of the input
sequence need to be checked on the average, assuming that the element being
searched for is equally likely to be any element in the array? How about in the
worst case? What are the average-case and worst-case running times of linear
search in Ø-notation? Justify your answers.

Solution:

On the average there will be n/2 checks and n checks for the worst case.
Both running times are Ø(n), since constants are insignificant against large n.


2.2-4

How can we modify almost any algorithm to have a good best-case running time?

Solution:

By checking the input and avoiding unnecessary work. E.g. for sorting, we could
check that input is already sorted and exit.
