17.1-1

If the set of stack operations included a MULTIPUSH operation, which pushes k
items onto the stack, would the O(1) bound on the amortized cost of stack operations
continue to hold?

Solution:

No. Consider a sequence of n MULTIPUSH/MULTIPOP/MULTIPUSH/... operations. Since each
operation costs O(s=stack size) in the worst case (as we must do s pops for s pushes), the
sequence's running time is O(sn). And the amortized cost of one operation is O(sn)/n = O(s).


17.1-3

Suppose we perform a sequence of n operations on a data structure in which the ith
operation costs i if i is an exact power of 2, and 1 otherwise. Use aggregate analysis
to determine the amortized cost per operation.

Solution:

Operation: 1, 2, 3, 4, 5, 6, 7, 8, ...
Cost:      1, 2, 1, 4, 1, 1, 1, 8, ...

Rearranging the terms, we get: 1, 2, 4, 8, 1, 1, 1, 1, ...

T(n) = SUM[i=0...n/2-1](2^i) + n/2 = 2^(n/2) - 1 + n/2 = O(2^(n/2))
T(1) = O(2^(n/2)/n)
