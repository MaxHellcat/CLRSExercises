12.2-1

Suppose that we have numbers between 1 and 1000 in a binary search tree, and wewant to search for the number 363. Which of the following sequences could not bethe sequence of nodes examined?

a. 2, 252, 401, 398, 330, 344, 397, 363.b. 924, 220, 911, 244, 898, 258, 362, 363.c. 925, 202, 911, 240, 912, 245, 363.d. 2, 399, 387, 219, 266, 382, 381, 278, 363.e. 935, 278, 347, 621, 299, 392, 358, 363.

Solution:

Drawn on paper for better visualisation.
Sequences c, e are wrong. In c element 912 violates the BST property, as it’s in the
left subtree of element 911. In e element 299 violates, as it’s in the right subtree of
element 347.


12.2-2

Write recursive versions of TREE-MINIMUM and TREE-MAXIMUM.

Solution:

TreeMinimumRecursive(x)
 if x.left == nil
 	return x.key
 return TreeMinimumRecursive(x.left)

TreeMaximumRecursive(x)
 if x.right == nil
 	return x.key
 return TreeMaximumRecursive(x.right)


12.2-3

Write the TREE-PREDECESSOR procedure.

Solution:

Assuming x isn’t nil.

TreePredecessor(x)
 if x.left != nil
 	return TreeMaximum(x.left)
 y = x.parent
 while y != nil && y.left == x
 	x = y
 	y = y.parent
 return y


12.2-4

Professor Bunyan thinks he has discovered a remarkable property of binary searchtrees. Suppose that the search for key k in a binary search tree ends up in a leaf.Consider three sets:
A, the keys to the left of the search path;
B, the keys on the search path;
C, the keys to the right of the search path.
Professor Bunyan claims that any three keys a C= A, b C= B, and c C= C must satisfy
a <= b <= c. Give a smallest possible counterexample to the professor’s claim.

Solution:

Note, both counterexamples are first drawn on paper, now theoretically:

Let b1 >= b2 >= b3 be the first keys on the search path.
Then the idea is to choose c to be the right child of b2, so that b2 <= c < b1.
This satisfies the BST property, since both b2 and c lie in the left subtree of b1,
yet c C= C lies to the right of the search path B and c < b1, thus violating the given
property a <= b <= c.
For example (on paper):
		9
	7
    3	    8
where the search path B is 9 -> 7 -> 3.

Similarly, we can show an example for a value lying to the left of the search path.


12.2-5

Show that if a node in a binary search tree has two children, then its successor hasno left child and its predecessor has no right child.

Solution:

If a node has a right subtree, then its successor is a min node in that subtree.
The min node is found by following the left children of the node’s rooted subtree until
we face no any left child, or nil.
Analogously we prove the second part of the exercise.


12.2-6

Consider a binary search tree T whose keys are distinct. Show that if the rightsubtree of a node x in T is empty and x has a successor y, then y is the lowestancestor of x whose left child is also an ancestor of x. (Recall that every node isits own ancestor.)

Solution:

Proof using math induction:

Let n be the number of node->parent steps that we follow when searching for
a node’s x successor y.

Base case:
For n=1, we have the node x to be the left child of its parent. Thus we prove the hypothesis, since a node is its own ancestor.

Inductive step:
For the inductive step we claim that if our hypothesis holds for n = i, then it holds
for n = i + 1.
Indeed, if node(i) is the ancestor of node x, then node(i+1) = node(i)->parent is also 
an ancestor of node x.
If, in addition, node(i) is a left child of node(i+1), then node(i+1) is the successor
of a node x.


Initial proof:

If a node x has no right subtree, then its successor y is the nearest ancestor that has
this node x in its left subtree, since x the max node in that subtree.
To find that ancestor y we follow the node’s parent until we detect that the node
is the left child of its parent, which is the successor x.
As described, since we traverse up the node->parent chain and check the node parent’s
left child on each step, we’re guaranteed to stop at the lowest (nearest) ancestor of x whose left child is also an ancestor of x, or x itself if its direct parent has x as the
left child.


12.2-7

An alternative method of performing an inorder tree walk of an n-node binarysearch tree finds the minimum element in the tree by calling TREE-MINIMUM andthen making n - 1 calls to TREE-SUCCESSOR. Prove that this algorithm runsin Ø(n) time.

Solution:

Since each node is visited a constant amount of times, we have T(n) = Ø(n).


12.2-8

Prove that no matter what node we start at in a height-h binary search tree, ksuccessive calls to TREE-SUCCESSOR take O(k + h) time.

Solution:

FTFO

Seems similar to the exercise above.


12.2-9

Let T be a binary search tree whose keys are distinct, let x be a leaf node, and let ybe its parent. Show that y.key is either the smallest key in T larger than x.key orthe largest key in T smaller than x.key.

Solution:

Let’s assume that node x is a left child of y. Then, since x has no children, y is the 
successor of x (exercise 12.2-6), which by definition is the node with the smallest
key greater than x.key.
Similarly we show that y is a predecessor of x, if x its right child.

