12-1 Binary search trees with equal keys

Equal keys pose a problem for the implementation of binary search trees.

a. What is the asymptotic performance of TREE-INSERT when used to insert nitems with identical keys into an initially empty binary search tree?

We propose to improve TREE-INSERT by testing before line 5 to determine whetherz.key = x.key and by testing before line 11 to determine whether z.key = y.key.

If equality holds, we implement one of the following strategies. For each strategy,find the asymptotic performance of inserting n items with identical keys into aninitially empty binary search tree. (The strategies are described for line 5, in whichwe compare the keys of z and x. Substitute y for x to arrive at the strategies forline 11.)

b. Keep a boolean flag x.b at node x, and set x to either x.left or x.right basedon the value of x.b, which alternates between FALSE and TRUE each time wevisit x while inserting a node with the same key as x.

c. Keep a list of nodes with equal keys at x, and insert z into the list.

d. Randomly set x to either x.left or x.right. (Give the worst-case performanceand informally derive the expected running time.)

Solution:

a. The running time is Ø(n) as we step into the same ‘if’ branch while looking for a
place for an item.

b.


12-2 Radix trees

Given two strings a = a0a1…ap and b = b0b1…bq, where each ai and each bj is in some ordered set of characters, we say that string a is lexicographically lessthan string b if either

1. there exists an integer j, where 0 <= j <= min(p, q), such that ai = bi for alli = 0, 1, …, j - 1 and aj < bj, or

2. p < q and ai = bi for all i = 0, 1, …, p.

For example, if a and b are bit strings, then 10100 < 10110 by rule 1 (lettingj = 3) and 10100 < 101000 by rule 2. This ordering is similar to that used inEnglish-language dictionaries.
The radix tree data structure shown in Figure 12.5 stores the bit strings 1011,10, 011, 100, and 0. When searching for a key a = a0a1 … ap, we go left at anode of depth i if ai = 0 and right if ai = 1. Let S be a set of distinct bit stringswhose lengths sum to n. Show how to use a radix tree to sort S lexicographicallyin Ø(n) time. For the example in Figure 12.5, the output of the sort should be thesequence 0, 011, 10, 100, 1011.

Solution:

We first build a tree to contain all the strings using the search rule described
in the problem description. To denote a string, we set x.key to be the value of a string.

We then use an in-order tree walk to sort the strings, thus making it in Ø(n) time.

