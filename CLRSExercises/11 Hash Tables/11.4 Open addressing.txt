11.4-1

Consider inserting the keys 10, 22, 31, 4, 15, 28, 17, 88, 59 into a hash table oflength m = 11 using open addressing with the auxiliary hash function h’(k) = k.
Illustrate the result of inserting these keys using linear probing, using quadraticprobing with c1 = 1 and c2 = 3, and using double hashing with h1(k) = k andh2(k) = 1 + (k mod(m - 1)).

Solution:

(i)* - number of probes.

Linear probing:

h(k, i) = (k + i) mod m

Key - Slot on each probe
15 - 4, 5
17 - 6, 7
88 - 0, 1
59 - 4, 5, 6, 7, 8

0	22(1)*
1	88(2)
2
3
4	4(1)
5	15(2)
6	28(1)
7	17(2)
8	59(5)
9	31(1)
10	10(1)


Quadratic probing:

h(k, i) = (k + i + 3*i^2) mod m

Key - Slots
15 - 4, 8
17 - 6, 10, 9, 3
88 - 0, 4, 3, 8, 8, 3, 4, 0, 2 (crazy stuff)
59 - 4, 8, 7

0	22(1)
1
2	88(9)
3	17(4)
4	4(1)
5
6	28(1)
7	59(3)
8	15(2)
9	31(1)
10	10(1)


Double hashing:

h(k, i) = (k + i*(1 + (k mod(m - 1)))) mod m

Key - Slots
15 - 4, 10, 5
17 - 6, 3
88 - 0, 9, 7
59 - 4, 3, 2

Based on the table above, the double hashing does look closest to the uniform hashing.

0	22(1)
1
2	59(3)
3	17(2)
4	4(1)
5	15(3)
6	28(1)
7	88(3)
8
9	31(1)
10	10(1)


11.4-2

Write pseudocode for HASH-DELETE as outlined in the text, and modify HASH-INSERTto handle the special value DELETED.

Solution:

Assuming DELETED is defined somewhere.

HashDelete(T, k)
 for i=0 to m - 1
 	let j = h(k, i)
 	if T[j] == k
		T[j] = DELETED // Instead of nil
		return j
	if T[j] == nil
		return

HashInsert(T, k)
 if T.n/T.m == 1
	error “Hash table overflow”
 for i=0 to m - 1
 	let j = h(k, i)
	if T[j] == nil OR T[j] == DELETED // In addition to check for nil
		T[j] = k
		return j


11.4-3

Consider an open-address hash table with uniform hashing. Give upper boundson the expected number of probes in an unsuccessful search and on the expectednumber of probes in a successful search when the load factor is 3/4 and when itis 7/8.

Solution:

Load factor a = n/m = 3/4

E1 = 1/(1-a) = 1/(1-3/4) = O(4) probes in an unsuccessful search
E2 = 1/a * ln(1/(1-a)) = 4/3 * ln4 = o(1.85) probes on a successful search

Load factor a = n/m = 7/8

E1 = 1/(1-a) = 1/(1-7/8) = O(8)
E2 = 1/a * ln(1/(1-a)) = 8/7 * ln8 = o(2.38)

Just curious:

a = 1/2

E1 = 1/(1-a) = O(2)
E2 = 1/a * ln(1/(1-a)) = 2*ln2 = o(1.39)

a = 9/10

E1 = 1/(1-a) = O(10)
E2 = 1/a * ln(1/(1-a)) = 10/9 * ln10 = o(1.39) = o(2.56)


11.4-4 *

TODO: It requires knowledge of Number-Theoretic algorithms. (Chapter 31)

Skipped.


11.4-5 *

Consider an open-address hash table with a load factor a. Find the nonzero value afor which the expected number of probes in an unsuccessful search equals twicethe expected number of probes in a successful search. Use the upper bounds givenby Theorems 11.6 and 11.8 for these expected numbers of probes.

Solution:

Let E1 be the expected number of probes for a successful search, E2 for unsuccessful.

Theorems give us:
E1 = 1/(1-a)
E2 = 1/a * ln(1/(1-a))

To complete the exercise we need to solve the following equation:
E1 = 2E2, or

1/(1-a) = 2/a * ln(1/(1-a))

TODO: It looks like a non-trivial equation to me =)

Stuck for now.
