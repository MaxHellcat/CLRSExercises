24.3-1

Run Dijkstra’s algorithm on the directed graph of Figure 24.2, first using vertex s
as the source and then using vertex z as the source. In the style of Figure 24.6,
show the d and & values and the vertices in set S after each iteration of the while
loop.

Solution:

Drawn in Bluebook.


24.3-2

Give a simple example of a directed graph with negative-weight edges for which
Dijkstra’s algorithm produces incorrect answers. Why doesn’t the proof of Theorem
24.6 go through when negative-weight edges are allowed?

Solution:

Drawn in Bluebook (also visualized Bellman-Ford alg. on the same graph to show it works OK).
To answer the 2nd question, the proof doesn't work because the contradiction
doesn't work. Namely, we can no longer say that sigma(s,y) <= sigma(s,u), because now
edges can be negative, which then results in inability to conclude that u.d = sigma(s,u).


24.3-3

Suppose we change line 4 of Dijkstra’s algorithm to the following.

4 while |Q| > 1

This change causes the while loop to execute |V| - 1 times instead of |V| times. Is
this proposed algorithm correct?

Solution:

Yes. Let v be the last vertex, then v.d = sigma(s,v) already, during relaxation of
ingoing edges (if any) in previous iterations of while loop.
Any adjacent vertex v also already has v.d = sigma(s,v) due to the loop invariant, since
they are in S = V - 1.

Checked in code (Dijkstra.swift, while Q.count > 1) - the answer is correct.
