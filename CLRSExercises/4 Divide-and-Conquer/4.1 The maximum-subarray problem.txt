4.1-1

What does FIND-MAXIMUM-SUBARRAY return when all elements of A are negative?

Solution:

The maximum negative element  along with its two indices.


4.1-2

Write pseudocode for the brute-force method of solving the maximum-subarrayproblem. Your procedure should run in O(n^2) time.

Solution:

Tuple findMaxSubarrayBruteForce(Array &arr){	int maxSum = INT_MIN;	int leftIndex = 0, rightIndex = 0;	int sum = 0;	for (int i = 0; i < arr.size(); i++)	{		sum = 0;		// Caveat 1: It's crucial we start with arr[i], as it itself may be max subarray, like 3 in {1, -1, 3, -4}		for (int j = i/* + 1*/; j < arr.size(); j++)		{			sum = sum + arr[j];			// Caveat 2: The non-strict comparrisson "narrows" the max subarray range			if (sum >= maxSum)			{				maxSum = sum;				leftIndex = i;				rightIndex = j;			}		}	}	return {leftIndex, rightIndex, maxSum};}


4.1-3

Implement both the brute-force and recursive algorithms for the maximum-subarrayproblem on your own computer. What problem size n0 gives the crossoverpoint at which the recursive algorithm beats the brute-force algorithm? Then,change the base case of the recursive algorithm to use the brute-force algorithmwhenever the problem size is less than n0. Does that change the crossover point?

Solution:

Code in CLRSEx.a) On my MacBook Pro I found the crossover point to be around 40.TODO: For large n, e.g. n = 100000, the original recursive starts to beat modified one, no idea why.Tested on Release configuration with -O2.Experimentally checked that modified version beats both original versions.Theoretically this can be explained as follows:Since we switch to brute-force when reaching crossover point, modified algorithm runs NOT SLOWER than any of the two original for any n, and FASTER for n > n0.TODO: Express it with a formulab) Modified algorithm changes the crossover point to 0. As there's no such problem size n, for which modified algorithm is beaten by either of two. 4.1-4

Suppose we change the definition of the maximum-subarray problem to allow theresult to be an empty subarray, where the sum of the values of an empty subarray is 0.
How would you change any of the algorithms that do not allow emptysubarrays to permit an empty subarray to be the result?

Solution:

I can only think we should return an empty subarray in the case the input array is itself empty.In which case we could check its size at the start, and if it's zero, return an empty array.For the maximum-subarray problem, we would return a tuple of the form {low: -1, hi: 0, sum: 0}4.1-5

Use the following ideas to develop a nonrecursive, linear-time algorithm for themaximum-subarray problem. Start at the left end of the array, and progress towardthe right, keeping track of the maximum subarray seen so far. Knowing a maximumsubarray of A[1..j], extend the answer to find a maximum subarray ending at index j+1
by using the following observation: a maximum subarray of A[1..j+1] is either
a maximum subarray of A[1..j] or a subarray A[i..j+1], for some 1 ≤ i ≤ j+1.
Determine a maximum subarray of the form A[i..j+1] in constant time
based on knowing a maximum subarray ending at index j.

Solution:

Code in CLRSEx.The key operation in the linear approach is to reset current sum and helper index i to j, whenever previous sum is negative. In other words, we drop calculated negative sum because adding it to the new element will always decrease the new sum, potentially breaking correct new sum calculation.

